// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250513175809_AddAction")]
    partial class AddAction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Data.Entities.Greenhouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivePresetId")
                        .HasColumnType("integer");

                    b.Property<string>("FertilizationMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LightingMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WateringMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActivePresetId");

                    b.HasIndex("UserEmail");

                    b.ToTable("Greenhouses");
                });

            modelBuilder.Entity("Data.Entities.Preset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HoursOfLight")
                        .HasColumnType("integer");

                    b.Property<double>("MaxAirHumidity")
                        .HasColumnType("double precision");

                    b.Property<double>("MaxSoilHumidity")
                        .HasColumnType("double precision");

                    b.Property<double>("MaxTemperature")
                        .HasColumnType("double precision");

                    b.Property<double>("MinAirHumidity")
                        .HasColumnType("double precision");

                    b.Property<double>("MinSoilHumidity")
                        .HasColumnType("double precision");

                    b.Property<double>("MinTemperature")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SystemPresetId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserPresetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SystemPresetId");

                    b.HasIndex("UserPresetId");

                    b.ToTable("Presets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HoursOfLight = 12,
                            MaxAirHumidity = 60.0,
                            MaxSoilHumidity = 50.0,
                            MaxTemperature = 25.0,
                            MinAirHumidity = 40.0,
                            MinSoilHumidity = 30.0,
                            MinTemperature = 18.0,
                            Name = "Default System Preset"
                        });
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("email");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("NotificationUser", b =>
                {
                    b.Property<int>("NotificationsId")
                        .HasColumnType("integer");

                    b.Property<string>("Usersemail")
                        .HasColumnType("text");

                    b.HasKey("NotificationsId", "Usersemail");

                    b.HasIndex("Usersemail");

                    b.ToTable("NotificationUser");
                });

            modelBuilder.Entity("SensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GreenhouseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GreenhouseId");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("SystemPreset", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SystemPresets");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("UserPreset", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail");

                    b.ToTable("UserPresets");
                });

            modelBuilder.Entity("Data.Entities.Action", b =>
                {
                    b.HasOne("Data.Entities.Greenhouse", "Greenhouse")
                        .WithMany("Actions")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("Data.Entities.Greenhouse", b =>
                {
                    b.HasOne("Data.Entities.Preset", "ActivePreset")
                        .WithMany("Greenhouses")
                        .HasForeignKey("ActivePresetId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Greenhouses")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivePreset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Preset", b =>
                {
                    b.HasOne("SystemPreset", "SystemPreset")
                        .WithMany()
                        .HasForeignKey("SystemPresetId");

                    b.HasOne("UserPreset", "UserPreset")
                        .WithMany()
                        .HasForeignKey("UserPresetId");

                    b.Navigation("SystemPreset");

                    b.Navigation("UserPreset");
                });

            modelBuilder.Entity("Notification", b =>
                {
                    b.HasOne("Data.Entities.Greenhouse", "Greenhouse")
                        .WithMany("Notifications")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("NotificationUser", b =>
                {
                    b.HasOne("Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("Usersemail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SensorReading", b =>
                {
                    b.HasOne("Data.Entities.Greenhouse", "Greenhouse")
                        .WithMany("SensorReadings")
                        .HasForeignKey("GreenhouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Greenhouse");
                });

            modelBuilder.Entity("SystemPreset", b =>
                {
                    b.HasOne("Data.Entities.Preset", "Preset")
                        .WithOne()
                        .HasForeignKey("SystemPreset", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preset");
                });

            modelBuilder.Entity("UserPreset", b =>
                {
                    b.HasOne("Data.Entities.Preset", "Preset")
                        .WithOne()
                        .HasForeignKey("UserPreset", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("UserPresets")
                        .HasForeignKey("UserEmail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Preset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Greenhouse", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Notifications");

                    b.Navigation("SensorReadings");
                });

            modelBuilder.Entity("Data.Entities.Preset", b =>
                {
                    b.Navigation("Greenhouses");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("Greenhouses");

                    b.Navigation("UserPresets");
                });
#pragma warning restore 612, 618
        }
    }
}
